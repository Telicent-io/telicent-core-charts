# Copyright (C) 2025 Telicent Limited
# Telicent Smart Cache Search stand-alone chart

# @section Global Parameters
# @descStart
# Contains global parameters, these parameters are mirrored within the Telicent core umbrella chart
# @descEnd
## Please, note that this will override the image parameters
## Current available global image parameters: imageRegistry and imagePullSecrets

#
global:
  # @key global.imageRegistry Global image registry
  imageRegistry: ""
  # E.g.
  # imagePullSecrets:
  #   - myRegistryKeySecretName
  #
  # @key global.imagePullSecrets Global registry secret names as an array
  imagePullSecrets: [ ]
  # @key global.appHostDomain Domain name associated with Smart Cache Search API & Projector
  appHostDomain: "apps.telicent.io"
  # @key global.authHostDomain Domain to be used for interacting with Telicent authentication services, including OIDC providers
  authHostDomain: "auth.telicent.io"
  # @key global.istioServiceAccountName The name of the Istio service account to use for Smart Cache Search API & Projector
  istioServiceAccountName: istio-ingress
  # @key global.istioNamespace The namespace where Istio is installed
  istioNamespace: istio-system
  # @key global.existingTruststoreSecretName The name of an existing secret containing the truststore
  existingTruststoreSecretName: ""
  # This is used to mount the truststore in the container, default is /app/config/truststore
  truststore:
    # @key global.truststore.mountPath The mount path for the truststore in the container
    mountPath: /app/config/truststore

# -----------------------------------------------------------------------------
# @section Smart Cache Search API Parameters
# -----------------------------------------------------------------------------
api:
  # @section Configuration Parameters - Smart Cache Search API
  # @descStart
  # Contains configuration parameters specific to the Smart Cache Search API application
  # @descEnd
  configuration:
    # @key api.configuration.userAttributesUrl URL for the user details endpoint
    userAttributesUrl: http://access-api.tc-system.svc.cluster.local:8080/users/lookup/{user}
    # @key api.configuration.attributeHierarchyUrl URL for the user hierarchy endpoint
    attributeHierarchyUrl: http://access-api.tc-system.svc.cluster.local:8080/hierarchies/lookup/{name}

    # @key api.configuration.javaOptions JVM options for the application
    javaOptions: -XX:MaxRAMPercentage=70.0

    # @key api.configuration.otelMetricsExporter OpenTelemetry metrics exporter
    # Options: prometheus, otlp, none
    otelMetricsExporter: prometheus
    # @key api.configuration.otelTracesExporter OpenTelemetry traces exporter
    # Options: otlp, none
    otelTracesExporter: none

    # @key api.configuration.elasticHost OpenSearch host
    # Note: This should be the URL of your OpenSearch instance, including protocol (https or http)
    elasticHost: https://your.opensearch.host.here:443
    # @key api.configuration.elasticPort OpenSearch port number
    elasticPort: "443"
    # @key api.configuration.elasticClusterPort OpenSearch cluster port
    # Note: This should be the port of your OpenSearch cluster, typically 9200
    elasticClusterPort: "9200"
    # @key api.configuration.opensearchCompatibility Enable OpenSearch compatibility
    opensearchCompatibility: "true"
    # @key api.configuration.elasticIndexNames OpenSearch index name(s)
    elasticIndexNames: search,doc-content
    # @key api.configuration.searchFieldOptions Field options for search
    # This is a comma-separated list of fields to be used for search, with optional weights
    searchFieldOptions: primaryName^2,*

  # @section OpenSearch secrets - Smart Cache Search API
  # Note: It is recommended to use a Kubernetes secret for sensitive information like passwords
  elasticSecrets:
    # @key api.elasticSecrets.elasticUser OpenSearch username
    elasticUser: ""
    # @key api.elasticSecrets.elasticPassword OpenSearch user password
    elasticPassword: ""
    # @key api.elasticSecrets.truststorePass Password for the truststore
    truststorePass: ""
    # @key api.elasticSecrets.existingEnvironmentSecretName Name of an existing environment secret
    existingEnvironmentSecretName: ""

  # @section Common Parameters - Smart Cache Search API
  # @key api.fullnameOverride String to fully override the generated release name
  fullnameOverride: ""
  # @key api.nameOverride String to partially override fullname (will maintain the release name)
  nameOverride: ""

  # @section Deployment Parameters - Smart Cache Search API
  # @key api.replicas Number of Smart Cache Search API replicas to deploy
  replicas: 1
  # @key api.revisionHistoryLimit Number of controller revisions to keep
  revisionHistoryLimit: 5
  # @key api.annotations Add extra annotations to the Deployment object
  annotations: { }
  # @key api.extraEnvs List of additional environment variables to set in the pod
  extraEnvs: [ ]

  image:
    # @key api.image.registry [default: REGISTRY_NAME] Smart Cache Search API image registry
    registry: 098669589541.dkr.ecr.eu-west-2.amazonaws.com
    # @key api.image.repository [default: REPOSITORY_NAME/search-api-server] Smart Cache Search API image name
    repository: 098669589541.dkr.ecr.eu-west-2.amazonaws.com/search-api-server
    # @key api.image.tag Smart Cache Search API image tag. If not set, a tag is generated using the appVersion
    tag: ""
    # @key api.image.pullPolicy Smart Cache Search API image pull policy
    pullPolicy: IfNotPresent
    # @key api.image.pullSecrets Specify registry secret names as an array
    pullSecrets: [ ]

  resources:
    requests:
      # @key api.resources.requests.cpu Set containers' CPU request
      cpu: "500m"
      # @key api.resources.requests.memory Set containers' memory request
      memory: "4000Mi"
    limits:
      # @key api.resources.limits.cpu Set containers' CPU limit
      cpu: "1000m"
      # @key api.resources.limits.memory Set containers' memory limit
      memory: "8000Mi"

  containerSecurityContext:
    # @key api.containerSecurityContext.runAsUser Set containers' Security Context runAsUser User ID
    runAsUser: 185
    # @key api.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup Group ID
    runAsGroup: 185
    # @key api.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
    runAsNonRoot: true
    # @key api.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
    allowPrivilegeEscalation: false
    capabilities:
      #@key api.containerSecurityContext.capabilities.drop List of capabilities to be dropped
      drop:
        - ALL
    seccompProfile:
      # @key api.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
      type: RuntimeDefault

  podSecurityContext:
    # @key api.podSecurityContext.runAsUser Set the provisioning pod's Security Context runAsUser User ID
    runAsUser: 185
    # @key api.podSecurityContext.runAsGroup Set the provisioning pod's Security Context runAsGroup Group ID
    runAsGroup: 185
    # @key api.podSecurityContext.runAsNonRoot Set the provisioning pod's Security Context runAsNonRoot
    runAsNonRoot: true
    # @key api.podSecurityContext.fsGroup Set the provisioning pod's Group ID for the mounted volumes' filesystem
    fsGroup: 185
    seccompProfile:
      # @key api.podSecurityContext.seccompProfile.type Set the provisioning pod's Security Context seccomp profile
      type: RuntimeDefault

  # @section Metrics Parameters - Smart Cache Search API
  metrics:
    service:
      # @key api.metrics.service.name Name for the Prometheus service
      name: metrics
      # @key api.metrics.service.port Port for the Prometheus service
      port: 9464

  # @section Traffic Exposure Parameters - Smart Cache Search API
  service:
    # @key api.service.port Smart Cache Search API service port
    port: 8181
    # @key api.service.type Smart Cache Search API service port
    type: ClusterIP

  ingress:
    # @key api.ingress.principal Principal to use for ingress traffic. If not set, defaults to the Istio service account in the istio-system
    principal: ""

  # @section Service Account Parameters - Smart Cache Search Api
  serviceAccount:
    # @key api.serviceAccount.name Name of the created ServiceAccount. If not set, a name is generated using the fullname template
    name: ""
    #@key api.serviceAccount.annotations Additional custom annotations for the ServiceAccount
    annotations: { }

# -----------------------------------------------------------------------------
# @section Smart Cache Search Projector/Indexer Parameters
# -----------------------------------------------------------------------------
projector:
  # @section Configuration Parameters - Smart Cache Search Projector
  # @descStart
  # Contains configuration parameters specific to the Smart Cache Search Projector application
  # @descEnd
  configuration:
    # @key projector.configuration.javaOptions JVM options for the application
    javaOptions: -XX:MaxRAMPercentage=70.0 -Djavax.net.ssl.trustStore=/app/config/truststore/truststore.jks

    # @key projector.configuration.otelMetricsExporter OpenTelemetry metrics exporter
    # Options: prometheus, otlp, none
    otelMetricsExporter: prometheus
    # @key projector.configuration.otelTracesExporter OpenTelemetry traces exporter
    # Options: otlp, none
    otelTracesExporter: none

    # @key projector.configuration.elasticHost OpenSearch host
    # Note: This should be the URL of your OpenSearch instance, including protocol (https or http)
    elasticHost: https://your.opensearch.host.here:443
    # @key projector.configuration.elasticPort OpenSearch port number
    elasticPort: "443"
    # @key projector.configuration.elasticClusterPort OpenSearch cluster port
    # Note: This should be the port of your OpenSearch cluster, typically 9200
    elasticClusterPort: "9200"
    # @key projector.configuration.opensearchCompatibility Enable OpenSearch compatibility
    opensearchCompatibility: "true"
    # @key projector.configuration.elasticIndex Name of the index in OpenSearch
    elasticIndex: search

    # @key projector.configuration.topic Topic to consume messages from
    topic: knowledge
    # @key projector.configuration.dlqTopic Dead-letter topic for failed messages
    dlqTopic: knowledge.dlq
    # @key projector.configuration.indexBatchSize Batch size for indexing documents
    indexBatchSize: "500"

  # @section OpenSearch secrets - Smart Cache Search Projector
  # Note: It is recommended to use a Kubernetes secret for sensitive information like passwords
  elasticSecrets:
    # @key projector.elasticSecrets.elasticUser OpenSearch username
    elasticUser: ""
    # @key projector.elasticSecrets.elasticPassword OpenSearch user password
    elasticPassword: ""
    # @key projector.elasticSecrets.truststorePass Password for the truststore
    truststorePass: ""
    # @key projector.elasticSecrets.existingEnvironmentSecretName Name of an existing environment secret
    existingEnvironmentSecretName: ""

  # @section Deployment Parameters - Smart Cache Search Projector
  # @key projector.replicas Number of Smart Cache Search Projector replicas to deploy
  replicas: 1
  # @key projector.revisionHistoryLimit Number of controller revisions to keep
  revisionHistoryLimit: 5
  # @key projector.annotations Add extra annotations to the Deployment object
  annotations: { }
  # @key projector.extraEnvs List of additional environment variables to set in the pod
  extraEnvs: [ ]

  image:
    # @key projector.image.registry [default: REGISTRY_NAME] Smart Cache Search Projector image registry
    registry: 098669589541.dkr.ecr.eu-west-2.amazonaws.com
    # @key projector.image.repository [default: REPOSITORY_NAME/search-api-server] Smart Cache Search Projector image name
    repository: 098669589541.dkr.ecr.eu-west-2.amazonaws.com/smart-cache-elastic-index
    # @key projector.image.tag Smart Cache Search Projector image tag. If not set, a tag is generated using the appVersion
    tag: ""
    # @key projector.image.pullPolicy Smart Cache Search Projector image pull policy
    pullPolicy: IfNotPresent
    # @key projector.image.pullSecrets Specify registry secret names as an array
    pullSecrets: [ ]

  resources:
    requests:
      # @key projector.resources.requests.cpu Set containers' CPU request
      cpu: "250m"
      # @key projector.resources.requests.memory Set containers' memory request
      memory: "1000Mi"
    limits:
      # @key projector.resources.limits.cpu Set containers' CPU limit
      cpu: "500m"
      # @key projector.resources.limits.memory Set containers' memory limit
      memory: "2000Mi"

  containerSecurityContext:
    # @key projector.containerSecurityContext.runAsUser Set containers' Security Context runAsUser User ID
    runAsUser: 185
    # @key projector.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup Group ID
    runAsGroup: 185
    # @key projector.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
    runAsNonRoot: true
    # @key projector.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
    allowPrivilegeEscalation: false
    capabilities:
      #@key projector.containerSecurityContext.capabilities.drop List of capabilities to be dropped
      drop:
        - ALL
    seccompProfile:
      # @key projector.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
      type: RuntimeDefault

  podSecurityContext:
    # @key projector.podSecurityContext.runAsUser Set the provisioning pod's Security Context runAsUser User ID
    runAsUser: 185
    # @key projector.podSecurityContext.runAsGroup Set the provisioning pod's Security Context runAsGroup Group ID
    runAsGroup: 185
    # @key projector.podSecurityContext.runAsNonRoot Set the provisioning pod's Security Context runAsNonRoot
    runAsNonRoot: true
    # @key projector.podSecurityContext.fsGroup Set the provisioning pod's Group ID for the mounted volumes' filesystem
    fsGroup: 185
    seccompProfile:
      # @key projector.podSecurityContext.seccompProfile.type Set the provisioning pod's Security Context seccomp profile
      type: RuntimeDefault

  # @section Metrics Parameters - Smart Cache Search Projector
  metrics:
    service:
      # @key projector.metrics.service.name Name for the Prometheus service
      name: metrics
      # @key projector.metrics.service.port Port for the Prometheus service
      port: 9464

  # @section Traffic Exposure Parameters - Smart Cache Search Projector
  service:
    # @key projector.service.port Smart Cache Search Projector service port
    port: 8181
    # @key projector.service.type Smart Cache Search Projector service port
    type: ClusterIP

  ingress:
    # @key projector.ingress.principal Principal to use for ingress traffic. If not set, defaults to the Istio service account in the istio-system
    principal: ""

  # @section Service Account Parameters - Smart Cache Search Projector
  serviceAccount:
    # @key projector.serviceAccount.name Name of the created ServiceAccount. If not set, a name is generated using the fullname template
    name: ""
    #@key projector.serviceAccount.annotations Additional custom annotations for the ServiceAccount
    annotations: { }


graphServer:
  # @key graphServer.principal is the principal to use for graph server traffic
  # If not set, it defaults to the graph server name in the current namespace
  principal: ""

