# Copyright (C) 2025 Telicent Limited
# Telicent Smart Cache Search stand-alone chart

# @section Global Parameters
# @descStart
# Contains global parameters, these parameters are mirrored within the Telicent core umbrella chart
# @descEnd
## Please, note that this will override the image parameters
## Current available global image parameters: imageRegistry and imagePullSecrets

#
global:
  # @key global.imageRegistry Global image registry
  imageRegistry: ""
  # E.g.
  # imagePullSecrets:
  #   - myRegistryKeySecretName
  #
  # @key global.imagePullSecrets Global registry secret names as an array
  imagePullSecrets: []
  # @key global.appHostDomain Domain name associated with Access UI
  appHostDomain: "apps.telicent.io"
  # @key global.authHostDomain Domain to be used for interacting with Telicent authentication services, including OIDC providers
  authHostDomain: "auth.telicent.io"
  # @key global.istioServiceAccountName The name of the Istio service account to use for the Access API
  istioServiceAccountName: istio-ingress
  # @key global.istioNamespace The namespace where Istio is installed
  istioNamespace: istio-system

# api configuration
# @section api configuration This section contains configuration options specific to the Telicent Search API.
api:
  # @key api.annotations are additional annotations to add to the pod
  annotations: {}
  # @key api.replicas sets the number of replicas for the Search API
  replicas: 1
  # @key api.resources sets the resource requests and limits for the pod
  resources: {}
  # @key api.revisionHistoryLimit sets the number of old ReplicaSets to retain
  revisionHistoryLimit: 3

  # @section image configuration
  image:
    # @key api.image.imagePullSecrets is a list of secrets to use for pulling the image
    imagePullSecrets: []
    # @key api.image.pullPolicy defines the image pull policy
    pullPolicy: IfNotPresent
    # @key api.image.repository is the Docker repository for the image
    repository: 098669589541.dkr.ecr.eu-west-2.amazonaws.com/search-api-server
    # @key api.image.tag is the image tag to use
    tag: ""

  # @section containerSecurityContext sets the container security context
  containerSecurityContext:
    # @key api.containerSecurityContext.allowPrivilegeEscalation prevents privilege escalation
    allowPrivilegeEscalation: false
    capabilities:
      # @key api.containerSecurityContext.capabilities.drop drop all capabilities
      drop:
        - ALL
    # @key api.containerSecurityContext.runAsGroup sets the group ID for the container
    runAsGroup: 185
    # @key api.containerSecurityContext.runAsNonRoot ensures the container runs as a non-root user
    runAsNonRoot: true
    # @key api.containerSecurityContext.runAsUser sets the user ID for the container
    runAsUser: 185
    seccompProfile:
      # @key api.containerSecurityContext.seccompProfile.type defines the seccomp profile type
      # RuntimeDefault uses the default runtime seccomp profile
      type: RuntimeDefault

  podSecurityContext:
    # @key api.podSecurityContext.fsGroup fsGroup sets the filesystem group ID for the pod
    fsGroup: 185
    # @key api.podSecurityContext.runAsGroup runAsGroup sets the group ID for the pod
    runAsGroup: 185
    # @key api.podSecurityContext.runAsNonRoot runAsNonRoot ensures the pod runs as a non-root user
    runAsNonRoot: true
    # @key api.podSecurityContext.runAsUser runAsUser sets the user ID for the pod
    runAsUser: 185
    seccompProfile:
      # @key api.podSecurityContext.seccompProfile.type defines the seccomp profile type
      type: RuntimeDefault

  # @section metrics configuration
  metrics:
    service:
      # @key api.metrics.service.port is the port for the Prometheus service
      port: 9464
  # @key api.extraEnvs is a list of additional environment variables to set in the pod
  extraEnvs: []

  # @section API Configuration Parameters
  # @descStart
  # Contains configuration parameters specific to the Access UI application
  # @descEnd
  configuration:
    # @key api.configuration.attributeHierarchyUrl is the URL for the attribute hierarchy endpoint
    attributeHierarchyUrl: http://access-api.tc-system.svc.cluster.local:8080/hierarchies/lookup/{name}
    # @key api.configuration.elasticHost is the host for the OpenSearch instance
    # Note: This should be the URL of your OpenSearch instance, including the protocol (http or https)
    elasticHost: https://your.opensearch.host.here:443
    # @key api.configuration.elasticIndexNames is the name of the index in OpenSearch
    elasticIndexNames: search,doc-content
    # @key api.configuration.elasticPort is the port for the OpenSearch instance
    elasticPort: "443"
    # @key api.configuration.elasticClusterPort is the port for the OpenSearch cluster
    # Note: This should be the port of your OpenSearch cluster, typically 9200
    elasticClusterPort: "9200"
    # @key api.configuration.searchFieldOptions is the field options for search
    # This is a comma-separated list of fields to be used for search, with optional weights
    searchFieldOptions: primaryName^2,*
    # @key api.configuration.javaOptions are the JVM options for the application
    javaOptions: -XX:MaxRAMPercentage=70.0
    # @key api.configuration.opensearchCompatibility indicates if the application is compatible with OpenSearch
    # This should be set to "true" if the application is compatible with OpenSearch
    opensearchCompatibility: "true"
    # @key api.configuration.otelMetricsExporter is the OpenTelemetry metrics exporter
    # Options: prometheus, otlp, none
    otelMetricsExporter: prometheus
    # @key api.configuration.otelTracesExporter is the OpenTelemetry traces exporter
    # Options: otlp, none
    otelTracesExporter: none

    # @key api.configuration.userAttributesUrl is the URL for the user attributes endpoint
    userAttributesUrl: http://access-api.tc-system.svc.cluster.local:8080/users/lookup/{user}

  # @section service configuration
  service:
    # @key api.service.port is the port the service will listen on
    port: 8181
    # @key api.service.type is the type of service to create
    type: ClusterIP
  # elasticSecrets is a section for OpenSearch secrets
  # note: It is recommended to use a Kubernetes secret for sensitive information like passwords
  elasticSecrets:
    # @key api.elasticSecrets.elasticPassword is the password for the OpenSearch user
    elasticPassword: ""
    # @key api.elasticSecrets.elasticUser is the username for the OpenSearch user
    elasticUser: ""
    # @key api.elasticSecrets.truststorePass is the password for the truststore
    truststorePass: ""
    # @key api.elasticSecrets.existingEnvironmentSecretName is the name of an existing environment secret
    existingEnvironmentSecretName: ""

# @section projector configuration
# @descStart
# This section contains configuration options for the Smart Cache Search Projector.
# The projector is responsible for indexing data into the search engine. // TODO check wording
# @descEnd
projector:
  # @key projector.annotations are additional annotations to add to the pod
  annotations: {}
  # @key projector.replicas sets the number of replicas for the Search API
  replicas: 1
  # @key projector.resources sets the resource requests and limits for the pod
  resources: {}
  # @key projector.revisionHistoryLimit sets the number of old ReplicaSets to retain
  revisionHistoryLimit: 3
  
  # @section service configuration
  service:
    # @key service.type is the type of service to create
    type: ClusterIP
    
  # @section projector.image is the image configuration
  image:
    # @key projector.image.imagePullSecrets is a list of secrets to use for pulling the image
    imagePullSecrets: []
    # @key projector.image.pullPolicy defines the image pull policy
    pullPolicy: IfNotPresent
    # @key projector.image.repository is the Docker repository for the image
    repository: 098669589541.dkr.ecr.eu-west-2.amazonaws.com/smart-cache-elastic-index
    # @key projector.image.tag is the image tag to use
    # @descStart
    # appVersion is used by default when defining an empty string
    # @descEnd
    tag: ""

  # @section projector.containerSecurityContext sets the container security context
  containerSecurityContext:
    # @key projector.containerSecurityContext.allowPrivilegeEscalation prevents privilege escalation
    allowPrivilegeEscalation: false
    # @section projector.containerSecurityContext.capabilities sets the capabilities for the container
    capabilities:
      # @key projector.containerSecurityContext.capabilities.drop all capabilities
      drop:
        - ALL
    # @key projector.containerSecurityContext.runAsGroup sets the group ID for the container
    runAsGroup: 185
    # @key projector.containerSecurityContext.runAsNonRoot ensures the container runs as a non-root user
    runAsNonRoot: true
    # @key projector.containerSecurityContext.runAsUser sets the user ID for the container
    runAsUser: 185
    seccompProfile:
      # @key projector.containerSecurityContext.seccompProfile.type defines the seccomp profile type RuntimeDefault uses the default runtime seccomp profile
      type: RuntimeDefault

  podSecurityContext:
    # @key projector.podSecurityContext.fsGroup sets the filesystem group ID for the pod
    fsGroup: 185
    # @key projector.podSecurityContext.runAsGroup sets the group ID for the pod
    runAsGroup: 185
    # @key projector.podSecurityContext.runAsNonRoot ensures the pod runs as a non-root user
    runAsNonRoot: true
    # @key projector.podSecurityContext.runAsUser sets the user ID for the pod
    runAsUser: 185
    seccompProfile:
      # @key projector.podSecurityContext.seccompProfile.type defines the seccomp profile type RuntimeDefault uses the default runtime seccomp profile
      type: RuntimeDefault

  metrics:
    service:
      # @key projector.metrics.service.port is the port for the Prometheus service
      port: 9464
  # @key projector.extraEnvs is a list of additional environment variables to set in the pod
  extraEnvs: []
  elasticSecrets:
    # @key projector.elasticSecrets.elasticPassword is the password for the OpenSearch user
    elasticPassword: ""
    # @key projector.elasticSecrets.elasticUser is the username for the OpenSearch user
    elasticUser: ""
    # @key projector.elasticSecrets.truststorePass is the password for the truststore
    truststorePass: ""
    # @key projector.elasticSecrets.existingEnvironmentSecretName is a section for an existing environment secret
    existingEnvironmentSecretName: ""
  # @section projector.configuration is for projector specific settings
  configuration:
    # @key projector.configuration.topic is the topic to consume from the message broker
    topic: knowledge
    # @key projector.configuration.dlqTopic is the dead-letter queue topic for failed messages
    dlqTopic: knowledge.dlq
    # @key projector.configuration.elasticHost is the host for the OpenSearch instance
    # Note: This should be the URL of your OpenSearch instance, including the protocol (http or https)
    elasticHost: https://your.opensearch.host.here:443
    # @key projector.configuration.elasticIndex is the name of the index in OpenSearch
    elasticIndex: search
    # @key projector.configuration.elasticPort is the port for the OpenSearch instance
    elasticPort: "443"
    # @key projector.configuration.javaOptions are the Java options to use for the OpenSearch instance
    javaOptions: -XX:MaxRAMPercentage=70.0
    # @key projector.configuration.indexBatchSize is the batch size for indexing documents
    # this defines how many documents to index in a single batch
    indexBatchSize: "500"
    # @key projector.configuration.opensearchCompatibility indicates if the application is compatible with OpenSearch
    # This should be set to "true" if the application is compatible with OpenSearch
    opensearchCompatibility: "true"
    # @key projector.configuration.otelMetricsExporter is the OpenTelemetry metrics exporter
    otelMetricsExporter: prometheus
    # @key projector.configuration.otelTracesExporter is the OpenTelemetry traces exporter
    otelTracesExporter: none

# existingCacertSecret is a section for an existing secret containing the CA certificate
# existingCacertSecret:
#   name: ""

# @section serviceAccount configuration
serviceAccount:
  # @key serviceAccount.annotations are additional annotations for the service account
  annotations:
    {}
    # example.annotation/key: "value"
  # @key serviceAccount.name is the name of the service account
  name: ""

# @key fullnameOverride sets the full name of the chart
fullnameOverride: ""
# @key nameOverride sets a custom name for the chart it differs from fullnameOverride as it is not fully qualified
nameOverride: ""

# @section ingress configuration
ingress:
  # @key ingress.principal is the principal to use for ingress traffic
  # If not set, it defaults to the Istio service account in the istio-system
  principal: ""

graphServer:
  # @key graphServer.principal is the principal to use for graph server traffic
  # If not set, it defaults to the graph server name in the current namespace
  principal: ""
